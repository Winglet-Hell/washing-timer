"""
Washing Timer Bot - –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å

Telegram –±–æ—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ —Å—Ç–∏—Ä–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–µ—Ä—Å–∏—è: 2.0.0
–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: python-telegram-bot v20+
"""

import logging
import os
import re
import uuid
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Optional, Tuple, List, Any

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
MAX_TIMERS_PER_USER = 10

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
project_root = Path(__file__).parent.parent
logs_dir = project_root / "logs"
config_dir = project_root / "config"

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
logs_dir.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.FileHandler(logs_dir / "bot.log"),
        logging.StreamHandler()
    ]
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (Context7 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('httpcore').setLevel(logging.WARNING) 
logging.getLogger('apscheduler').setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
# –§–æ—Ä–º–∞—Ç: {user_id: {timer_id: {"description": str, "end_time": datetime, "job": Job}}}
active_timers: Dict[int, Dict[str, Dict[str, Any]]] = {}

def get_user_timers(user_id: int) -> Dict[str, Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return active_timers.setdefault(user_id, {})

def add_timer(user_id: int, timer_id: str, description: str, end_time: datetime, job: Any) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_timers = get_user_timers(user_id)
    user_timers[timer_id] = {
        "description": description,
        "end_time": end_time,
        "job": job,
        "created_at": datetime.now()
    }

def remove_timer(user_id: int, timer_id: str) -> bool:
    """–£–¥–∞–ª–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏ —É–¥–∞–ª–µ–Ω"""
    user_timers = get_user_timers(user_id)
    if timer_id in user_timers:
        # –û—Ç–º–µ–Ω—è–µ–º job –µ—Å–ª–∏ –æ–Ω –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
        job = user_timers[timer_id].get("job")
        if job:
            try:
                job.schedule_removal()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å job {timer_id}: {e}")
        
        del user_timers[timer_id]
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–∞–π–º–µ—Ä–æ–≤, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        if not user_timers:
            active_timers.pop(user_id, None)
            
        return True
    return False

def get_timer_count(user_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return len(get_user_timers(user_id))

def format_timer_list(user_id: int, page: int = 0, items_per_page: int = 5) -> Tuple[str, List[List[InlineKeyboardButton]]]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    user_timers = get_user_timers(user_id)
    
    if not user_timers:
        return "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤", [[InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="new_timer")]]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
    sorted_timers = sorted(
        user_timers.items(), 
        key=lambda x: x[1]["created_at"]
    )
    
    total_count = len(sorted_timers)
    start_idx = page * items_per_page
    end_idx = start_idx + items_per_page
    page_timers = sorted_timers[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    message_parts = [f"‚è∞ *–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: {total_count}*\n"]
    
    for i, (timer_id, timer_info) in enumerate(page_timers, start_idx + 1):
        description = timer_info["description"]
        end_time = timer_info["end_time"]
        now = datetime.now()
        
        if end_time > now:
            remaining = end_time - now
            remaining_str = f"{remaining.seconds // 60}–º–∏–Ω {remaining.seconds % 60}—Å–µ–∫"
            status = f"‚è≥ –æ—Å—Ç–∞–ª–æ—Å—å {remaining_str}"
        else:
            status = "‚è∞ –¥–æ–ª–∂–µ–Ω –±—ã–ª –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è"
            
        message_parts.append(f"{i}. *#{timer_id}*: {description}")
        message_parts.append(f"   {status}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏ (–ø–æ 2 –≤ —Ä—è–¥)
    timer_buttons = []
    for timer_id, _ in page_timers:
        timer_buttons.append(InlineKeyboardButton(f"‚ùå #{timer_id}", callback_data=f"cancel_timer_{timer_id}"))
        
        if len(timer_buttons) == 2:
            keyboard.append(timer_buttons)
            timer_buttons = []
    
    if timer_buttons:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
        keyboard.append(timer_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"timers_page_{page-1}"))
    if end_idx < total_count:
        pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"timers_page_{page+1}"))
    
    if pagination_buttons:
        keyboard.append(pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.append([
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", callback_data="cancel_all_timers"),
        InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π", callback_data="new_timer")
    ])
    
    return "\n".join(message_parts), keyboard


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
    
    keyboard = [
        [InlineKeyboardButton("üìñ –ü–æ–º–æ—â—å", callback_data="help")],
        [InlineKeyboardButton("‚è±Ô∏è –ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏", callback_data="examples")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    timer_count = get_timer_count(user_id)
    max_timers = MAX_TIMERS_PER_USER
    
    status_text = ""
    if timer_count > 0:
        status_text = f"‚è∞ –£ –≤–∞—Å {timer_count}/{max_timers} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤\n\n"
    
    await update.message.reply_text(
        "üß∫ *Washing Timer Bot - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã!*\n\n"
        f"{status_text}"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å—Ç–∏—Ä–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
        "üìù *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "‚Ä¢ –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —á–∞—Å–∞: –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã (`35`, `90`)\n"
        "‚Ä¢ –î–ª—è –≤—Ä–µ–º–µ–Ω–∏ –±–æ–ª—å—à–µ —á–∞—Å–∞: —Ñ–æ—Ä–º–∞—Ç *–ß–ß–ú–ú* (`0145`, `0200`)\n"
        f"‚Ä¢ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–æ {max_timers} —Ç–∞–π–º–µ—Ä–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n\n"
        "üÜï *–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞\n"
        "‚Ä¢ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º\n\n"
        "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    timer_count = get_timer_count(user_id)
    max_timers = MAX_TIMERS_PER_USER
    
    help_text = (
        "ü§ñ *Washing Timer Bot - –°–ø—Ä–∞–≤–∫–∞ (–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã)*\n\n"
        f"üìä *–í–∞—à–∏ —Ç–∞–π–º–µ—Ä—ã:* {timer_count}/{max_timers}\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã\n"
        "/status - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã\n\n"
        "*üÜï –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        f"‚Ä¢ –î–æ {max_timers} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–æ–≤\n"
        "‚Ä¢ –£–¥–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π\n"
        "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞\n\n"
        "*–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:*\n"
        "‚Ä¢ *–ú–∏–Ω—É—Ç—ã:* 1-999 (–¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ 16+ —á–∞—Å–æ–≤)\n"
        "‚Ä¢ *–ß–ß–ú–ú:* 4 —Ü–∏—Ñ—Ä—ã (–ß–ß: —á–∞—Å—ã 00-23, –ú–ú: –º–∏–Ω—É—Ç—ã 00-59)\n\n"
        "*–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n"
        "‚Ä¢ `30` = 30 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ `90` = 1 —á–∞—Å 30 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ `0145` = 1 —á–∞—Å 45 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ `0200` = 2 —á–∞—Å–∞\n\n"
        "*üí° –°—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:*\n"
        "‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∏—Ä–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω\n"
        "‚Ä¢ –†–∞–∑–Ω—ã–µ —ç—Ç–∞–ø—ã —Å—Ç–∏—Ä–∫–∏ (—Å—Ç–∏—Ä–∫–∞ + —Å—É—à–∫–∞)\n"
        "‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≤ –¥–æ–º–µ"
    )
    
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def cancel_timer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    timer_count = get_timer_count(user_id)
    
    if timer_count > 0:
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_timers = get_user_timers(user_id).copy()  # –ö–æ–ø–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        
        cancelled_count = 0
        for timer_id in user_timers:
            if remove_timer(user_id, timer_id):
                cancelled_count += 1
        
        keyboard = [[InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä", callback_data="new_timer")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ —Ç–∞–π–º–µ—Ä–æ–≤: {cancelled_count}*\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∞–π–º–µ—Ä—ã: –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã (35) –∏–ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß–ú–ú (0135)",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª {cancelled_count} —Ç–∞–π–º–µ—Ä–æ–≤")
    else:
        keyboard = [[InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="new_timer")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )


async def status_timer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤"""
    user_id = update.effective_user.id
    user_timers = get_user_timers(user_id)
    
    if user_timers:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤
        timer_list = []
        for timer_id, timer_info in user_timers.items():
            description = timer_info["description"]
            timer_list.append(f"‚è∞ #{timer_id}: {description}")
        
        timers_text = "\n".join(timer_list)
        timer_count = len(user_timers)
        
        keyboard = [
            [InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞–º–∏", callback_data="list_timers")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", callback_data="cancel_all_timers")],
            [InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä", callback_data="new_timer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚è≥ *–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: {timer_count}*\n\n"
            f"{timers_text}\n\n"
            "–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞! üîî",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
    else:
        keyboard = [[InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="new_timer")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã (35) –∏–ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß–ú–ú (0135), —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )


def validate_time_format(time_str: str) -> Optional[Tuple[int, int]]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if not re.match(r'^\d+$', time_str):
        return None
    
    try:
        # –ï—Å–ª–∏ 1-3 —Ü–∏—Ñ—Ä—ã, —Ç–æ —ç—Ç–æ –º–∏–Ω—É—Ç—ã
        if len(time_str) <= 3:
            minutes = int(time_str)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –º–∏–Ω—É—Ç (–º–∞–∫—Å–∏–º—É–º 999 –º–∏–Ω—É—Ç = ~16 —á–∞—Å–æ–≤)
            if not (1 <= minutes <= 999):
                return None
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
            hours = minutes // 60
            remaining_minutes = minutes % 60
            
            return hours, remaining_minutes
            
        # –ï—Å–ª–∏ 4 —Ü–∏—Ñ—Ä—ã, —Ç–æ —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ß–ß–ú–ú
        elif len(time_str) == 4:
            hours = int(time_str[:2])
            minutes = int(time_str[2:])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã
            if not (0 <= hours <= 23):
                return None
            if not (0 <= minutes <= 59):
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ —Ä–∞–≤–Ω–æ 0
            if hours == 0 and minutes == 0:
                return None
                
            return hours, minutes
            
        # –ë–æ–ª–µ–µ 4 —Ü–∏—Ñ—Ä - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        else:
            return None
            
    except ValueError:
        return None


async def timer_callback(context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–ª–±—ç–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç data –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–º–µ—Ä–µ
    """
    job = context.job
    user_id = job.user_id
    timer_data = job.data  # –°–æ–¥–µ—Ä–∂–∏—Ç {timer_id, description}
    
    timer_id = timer_data["timer_id"]
    description = timer_data["description"]
    
    # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
    timer_removed = remove_timer(user_id, timer_id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–∞–π–º–µ—Ä–æ–≤
        remaining_count = get_timer_count(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = f"‚úÖ *–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
        message_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        message_text += "üßº –ú–æ–∂–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å –±–µ–ª—å—ë –∏–∑ —Å—Ç–∏—Ä–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã!\n\n"
        
        if remaining_count > 0:
            message_text += f"‚è∞ –£ –≤–∞—Å –µ—â–µ {remaining_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–∞(–æ–≤)\n\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = []
        if remaining_count > 0:
            keyboard.append([InlineKeyboardButton("üìã –ú–æ–∏ —Ç–∞–π–º–µ—Ä—ã", callback_data="list_timers")])
        keyboard.append([InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä", callback_data="new_timer")])
        
        reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
        
        await context.bot.send_message(
            chat_id=user_id,
            text=message_text,
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞ {timer_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def handle_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ - —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã"""
    user_id = update.effective_user.id
    username = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    time_str = update.message.text.strip()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –≤–≤–µ–ª –≤—Ä–µ–º—è: {time_str}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    timer_count = get_timer_count(user_id)
    max_timers = MAX_TIMERS_PER_USER  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    if timer_count >= max_timers:
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ —Ç–∞–π–º–µ—Ä—ã", callback_data="list_timers")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ", callback_data="cancel_all_timers")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚ö†Ô∏è *–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–π–º–µ—Ä–æ–≤!*\n\n"
            f"–£ –≤–∞—Å —É–∂–µ {timer_count}/{max_timers} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.\n\n"
            "–û—Ç–º–µ–Ω–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–π–º–µ—Ä—ã, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ.",
            parse_mode="Markdown",
            reply_markup=reply_markup
        )
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    time_data = validate_time_format(time_str)
    if time_data is None:
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!*\n\n"
            "üìù *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:*\n"
            "‚Ä¢ *–ú–∏–Ω—É—Ç—ã:* 1-999 (–Ω–∞–ø—Ä–∏–º–µ—Ä: `30`, `90`)\n"
            "‚Ä¢ *–ß–ß–ú–ú:* 4 —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: `0145`, `0200`)\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "‚Ä¢ `30` = 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ `90` = 1 —á–∞—Å 30 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ `0145` = 1 —á–∞—Å 45 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ `0200` = 2 —á–∞—Å–∞",
            parse_mode="Markdown"
        )
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {time_str}")
        return
    
    hours, minutes = time_data
    total_seconds = hours * 3600 + minutes * 60
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    time_display = f"{hours} —á {minutes} –º–∏–Ω" if hours > 0 else f"{minutes} –º–∏–Ω"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
    timer_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    end_time = datetime.now() + timedelta(seconds=total_seconds)
    end_time_str = end_time.strftime("%H:%M")
    
    # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    description = f"{time_display} (–¥–æ {end_time_str})"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∂–æ–± –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö
    job = context.job_queue.run_once(
        timer_callback,
        total_seconds,
        user_id=user_id,
        name=f"timer_{user_id}_{timer_id}",
        data={
            "timer_id": timer_id,
            "description": description,
            "duration": time_display
        }
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–π–º–µ—Ä–µ
    add_timer(user_id, timer_id, description, end_time, job)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    new_timer_count = get_timer_count(user_id)
    keyboard = [
        [InlineKeyboardButton(f"üìã –ú–æ–∏ —Ç–∞–π–º–µ—Ä—ã ({new_timer_count})", callback_data="list_timers")],
        [InlineKeyboardButton("‚ûï –ï—â–µ —Ç–∞–π–º–µ—Ä", callback_data="new_timer")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"‚è≥ *–¢–∞–π–º–µ—Ä #{timer_id} –∑–∞–ø—É—â–µ–Ω!*\n\n"
        f"üìÖ –í—Ä–µ–º—è: {time_display}\n"
        f"üïí –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è –≤: {end_time_str}\n"
        f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {new_timer_count}/{max_timers}\n\n"
        "–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º, –∫–æ–≥–¥–∞ —Å—Ç–∏—Ä–∫–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞! üîî",
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    
    logger.info(f"–¢–∞–π–º–µ—Ä {timer_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {total_seconds} —Å–µ–∫—É–Ω–¥")


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ - —Ä–∞—Å—à–∏—Ä–µ–Ω–æ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º python-telegram-bot
    """
    query = update.callback_query
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")
    
    # === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –¢–ê–ô–ú–ï–†–û–í ===
    
    if data == "list_timers" or data.startswith("timers_page_"):
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        page = 0
        if data.startswith("timers_page_"):
            page = int(data.split("_")[-1])
            
        message_text, keyboard = format_timer_list(user_id, page)
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=reply_markup
            )
        except Exception:
            await query.message.reply_text(
                message_text,
                parse_mode="Markdown", 
                reply_markup=reply_markup
            )
    
    elif data.startswith("cancel_timer_"):
        # –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞–π–º–µ—Ä
        timer_id = data.replace("cancel_timer_", "")
        
        if remove_timer(user_id, timer_id):
            await query.answer(f"‚è∞ –¢–∞–π–º–µ—Ä #{timer_id} –æ—Ç–º–µ–Ω–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤
            message_text, keyboard = format_timer_list(user_id, 0)
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.edit_message_text(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
            except Exception:
                await query.message.reply_text(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ç–∞–π–º–µ—Ä {timer_id}")
        else:
            await query.answer("‚ùå –¢–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    
    elif data == "cancel_all_timers":
        # –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
        timer_count = get_timer_count(user_id)
        
        if timer_count > 0:
            user_timers = get_user_timers(user_id).copy()
            cancelled_count = 0
            
            for timer_id in user_timers:
                if remove_timer(user_id, timer_id):
                    cancelled_count += 1
            
            keyboard = [[InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä", callback_data="new_timer")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.edit_message_text(
                    f"‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ —Ç–∞–π–º–µ—Ä–æ–≤: {cancelled_count}*\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞",
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
            except Exception:
                await query.message.reply_text(
                    f"‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ —Ç–∞–π–º–µ—Ä–æ–≤: {cancelled_count}*\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞",
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
            
            await query.answer(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ {cancelled_count} —Ç–∞–π–º–µ—Ä–æ–≤")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã ({cancelled_count})")
        else:
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤", show_alert=True)
    
    elif data == "new_timer":
        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        timer_count = get_timer_count(user_id)
        max_timers = MAX_TIMERS_PER_USER
        
        if timer_count >= max_timers:
            await query.answer(f"–ú–∞–∫—Å–∏–º—É–º {max_timers} —Ç–∞–π–º–µ—Ä–æ–≤", show_alert=True)
        else:
            try:
                await query.edit_message_text(
                    f"‚è∞ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞*\n\n"
                    f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: {timer_count}/{max_timers}\n\n"
                    "üìù *–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:*\n"
                    "‚Ä¢ –ú–∏–Ω—É—Ç—ã: `30`, `45`, `90`\n"
                    "‚Ä¢ –ß–ß–ú–ú: `0130`, `0200`\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Ç!",
                    parse_mode="Markdown"
                )
            except Exception:
                await query.message.reply_text(
                    f"‚è∞ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞*\n\n"
                    f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: {timer_count}/{max_timers}\n\n"
                    "üìù *–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:*\n"
                    "‚Ä¢ –ú–∏–Ω—É—Ç—ã: `30`, `45`, `90`\n"
                    "‚Ä¢ –ß–ß–ú–ú: `0130`, `0200`\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Ç!",
                    parse_mode="Markdown"
                )
    
    # === –°–¢–ê–†–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–û–ë–ù–û–í–õ–ï–ù–ù–´–ï) ===
    
    elif data == "help":
        help_text = (
            "ü§ñ *Washing Timer Bot - –°–ø—Ä–∞–≤–∫–∞*\n\n"
            "*–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:*\n"
            "‚Ä¢ *–ú–∏–Ω—É—Ç—ã:* 1-999 (–Ω–∞–ø—Ä–∏–º–µ—Ä: `30`, `90`)\n"
            "‚Ä¢ *–ß–ß–ú–ú:* 4 —Ü–∏—Ñ—Ä—ã (–ß–ß: —á–∞—Å—ã 00-23, –ú–ú: –º–∏–Ω—É—Ç—ã 00-59)\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n"
            "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
            "/status - –°—Ç–∞—Ç—É—Å —Ç–∞–π–º–µ—Ä–∞"
        )
        try:
            await query.edit_message_text(help_text, parse_mode="Markdown")
        except Exception:
            await query.answer("–°–ø—Ä–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç")
            await query.message.reply_text(help_text, parse_mode="Markdown")
        
    elif data == "examples":
        examples_text = (
            "‚è±Ô∏è *–ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏:*\n\n"
            "*–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–∏–Ω—É—Ç—ã):*\n"
            "`15` = 15 –º–∏–Ω—É—Ç\n"
            "`30` = 30 –º–∏–Ω—É—Ç\n"
            "`45` = 45 –º–∏–Ω—É—Ç\n"
            "`60` = 1 —á–∞—Å\n"
            "`90` = 1 —á–∞—Å 30 –º–∏–Ω—É—Ç\n"
            "`120` = 2 —á–∞—Å–∞\n\n"
            "*–ü–æ–ª–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç (–ß–ß–ú–ú):*\n"
            "`0130` = 1 —á–∞—Å 30 –º–∏–Ω—É—Ç\n"
            "`0200` = 2 —á–∞—Å–∞\n"
            "`0300` = 3 —á–∞—Å–∞\n\n"
            "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Ç! üí¨"
        )
        try:
            await query.edit_message_text(examples_text, parse_mode="Markdown")
        except Exception:
            await query.answer("–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç")
            await query.message.reply_text(examples_text, parse_mode="Markdown")



async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—à–∏–±–∫–∏ –∏–∑ –ª—é–±—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º python-telegram-bot v20+
    """
    error = context.error
    error_msg = str(error)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.error(
        f"Exception while handling an update: {error}",
        exc_info=error
    )
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
    if "Message is not modified" in error_msg:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    if "Conflict: terminated by other getUpdates request" in error_msg:
        logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        return
    
    # –î–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update and update.effective_message:
        try:
            error_text = (
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n\n"
                f"ID –æ—à–∏–±–∫–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {hash(str(error)) % 10000:04d}"
            )
            await update.effective_message.reply_text(error_text)
        except Exception as send_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    # –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ config
    env_path = config_dir / ".env"
    load_dotenv(env_path)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('BOT_TOKEN')
    if not token:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        print("‚ùå –û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN:")
        print("export BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞'")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("cancel", cancel_timer))
    application.add_handler(CommandHandler("status", status_timer))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    logger.info("üöÄ Washing Timer Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üöÄ Washing Timer Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª logs/bot.log")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=['message', 'callback_query']  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        )
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        total_timers = sum(len(user_timers) for user_timers in active_timers.values())
        if total_timers > 0:
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ {total_timers} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")
            active_timers.clear()
        
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
        print("‚úÖ –ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    main()
